import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import os
import json

# ====== –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô CSS ======
st.markdown(
    """
    <style>
    .stTextInput > div > div > input,
    .stSelectbox > div > div > div > div,
    .stNumberInput input {
        min-width: 500px !important;  
        max-width: 700px !important;
    }
    .block-container {
        max-width: 900px;
        margin-left: auto;
        margin-right: auto;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# --- Google Sheets Setup ---
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
GOOGLE_SERVICE_ACCOUNT_JSON = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON")
if not GOOGLE_SERVICE_ACCOUNT_JSON:
    st.error("Google Service Account JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    st.stop()
service_account_info = json.loads(GOOGLE_SERVICE_ACCOUNT_JSON)
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

# ==== HELPERS ====
def get_next_id():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    id_list = sheet.col_values(1)[1:]
    id_list = [int(x) for x in id_list if x.isdigit()]
    return max(id_list) + 1 if id_list else 1

def get_next_order_id():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    values = sheet.col_values(1)[1:]
    id_numbers = [int(x) for x in values if x.isdigit()]
    return max(id_numbers) + 1 if id_numbers else 1

@st.cache_data
def load_clients():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    return sheet.get_all_records()

@st.cache_data
def load_price():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ü—Ä–∞–π—Å")
    return sheet.get_all_records()

@st.cache_data
def load_sizes():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥")
    return sheet.get_all_records()

@st.cache_data
def load_colors():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–¶–≤–µ—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞")
    return sheet.get_all_records()

@st.cache_data
def load_orders():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    return sheet.get_all_records()

def append_client(values):
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    sheet.append_row(values)

def update_client_in_sheet(client_id, values):
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    records = sheet.get_all_records()
    for i, row in enumerate(records):
        if str(row.get("ID")) == str(client_id):
            sheet.update(f"A{i+2}:J{i+2}", [values])
            break

def save_order_to_sheet(order_rows, client_info, payment_info, order_id):
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    header = sheet.row_values(1) if sheet.get_all_values() else []
    if "–í—ñ–¥–º–æ–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞" not in header:
        if header:
            sheet.update_cell(1, len(header)+1, "–í—ñ–¥–º–æ–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞")
        else:
            sheet.append_row([
                "ID –∑–∞–∫–∞–∑–∞",
                "ID –∫–ª–∏–µ–Ω—Ç–∞", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ì–æ—Ä–æ–¥", "–ù–ü", "–î–æ—Å—Ç–∞–≤–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "–í–∞–ª—é—Ç–∞", "–¢–∏–ø –æ–ø–ª–∞—Ç—ã", "–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã", "–î–æ —Å–ø–ª–∞—Ç–∏",
                "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–¶–≤–µ—Ç", "–†–∞–∑–º–µ—Ä", "–†—É—á–Ω–æ–π —Ä–∞–∑–º–µ—Ä", "–ö-–≤–æ –≤ —Ä–æ—Å—Ç–æ–≤–∫–µ", "–ö-–≤–æ —Ä–æ—Å—Ç–æ–≤–æ–∫",
                "–û–±—â. –∫–æ–ª-–≤–æ", "–¶–µ–Ω–∞/—à—Ç", "–°–∫–∏–¥–∫–∞", "–°—É–º–º–∞ (–≥—Ä–Ω)", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–í—ñ–¥–º–æ–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞"
            ])
    for row in order_rows:
        manual_size = ""
        size_value = row.get("size", "")
        if "–≤–≤–µ—Å—Ç–∏" in str(row.get("size", "")).lower() or "—Ä—É—á–Ω" in str(row.get("size", "")).lower():
            manual_size = row.get("size", "")
            size_value = ""
        sheet.append_row([
            order_id,
            client_info["ID"],
            client_info["–Ü–º'—è"],
            client_info["–ü—Ä—ñ–∑–≤–∏—â–µ"],
            client_info["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"],
            client_info["–ú—ñ—Å—Ç–æ"],
            client_info["–ù–ü"],
            client_info["–î–æ—Å—Ç–∞–≤–∫–∞"],
            client_info["–ö–æ–º–µ–Ω—Ç–∞—Ä"],
            payment_info["–í–∞–ª—é—Ç–∞"],
            payment_info["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"],
            payment_info["–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã"] if payment_info["–¢–∏–ø –æ–ø–ª–∞—Ç—ã"] == "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞" else 0,
            payment_info["–î–æ —Å–ø–ª–∞—Ç–∏"],
            row.get("model", ""),
            row.get("color", ""),
            size_value,
            manual_size,
            row.get("v_rostovke", ""),
            row.get("qty_rostovok", ""),
            row.get("total_qty", ""),
            row.get("price", ""),
            row.get("discount", ""),
            row.get("total_sum", ""),
            datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            "+" if row.get("rejected", False) else ""
        ])

def update_order_rows_in_sheet(order_id, order_rows, common_fields):
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞"""
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    data = sheet.get_all_records()
    header = sheet.row_values(1)
    rows_to_update = []
    for i, row in enumerate(data):
        if str(row.get("ID –∑–∞–∫–∞–∑–∞")) == str(order_id):
            rows_to_update.append(i + 2)  # get_all_records –±–µ–∑ —à–∞–ø–∫–∏, –∞ GS —Å 1
    for idx, upd_row_num in enumerate(rows_to_update):
        if idx >= len(order_rows):
            break
        row_data = order_rows[idx]
        sheet.update(f"C{upd_row_num}:Z{upd_row_num}", [[
            common_fields["–ò–º—è"],
            common_fields["–§–∞–º–∏–ª–∏—è"],
            common_fields["–¢–µ–ª–µ—Ñ–æ–Ω"],
            common_fields["–ì–æ—Ä–æ–¥"],
            common_fields["–ù–ü"],
            common_fields["–î–æ—Å—Ç–∞–≤–∫–∞"],
            common_fields["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"],
            common_fields["–í–∞–ª—é—Ç–∞"],
            common_fields["–¢–∏–ø –æ–ø–ª–∞—Ç—ã"],
            common_fields["–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã"],
            common_fields["–î–æ —Å–ø–ª–∞—Ç–∏"],
            row_data.get("model", ""),
            row_data.get("color", ""),
            row_data.get("size", ""),
            row_data.get("manual_size", ""),
            row_data.get("v_rostovke", ""),
            row_data.get("qty_rostovok", ""),
            row_data.get("total_qty", ""),
            row_data.get("price", ""),
            row_data.get("discount", ""),
            row_data.get("total_sum", ""),
            row_data.get("date", ""),
            "+" if row_data.get("rejected") else ""
        ]])
    load_orders.clear()

# ==== –ù–∞–≤–∏–≥–∞—Ü–∏—è ====
if "page" not in st.session_state:
    st.session_state.page = "check"

def go_to(page):
    st.session_state.page = page
    st.rerun()

# ==== PAGE 1: –ü–æ–∏—Å–∫/–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_check():
    st.markdown("<h2 style='text-align: center;'>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    records = load_clients()
    client_dict = {}
    for row in records:
        phone = str(row.get("–ù–æ–º–µ—Ä", "")).strip()
        if phone and phone[0] != '0' and len(phone) == 9:
            phone = '0' + phone
        client_dict[phone] = {
            "id": row.get("ID"),
            "name": row.get("–ò–º—è", ""),
        }
    user_input = st.text_input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 068):").strip()
    matches = sorted([num for num in client_dict if num.startswith(user_input)]) if user_input else []
    selected = st.selectbox("–ù–∞–π–¥–µ–Ω—ñ –Ω–æ–º–µ—Ä–∏:", matches) if matches else None

    if st.button("Next ‚ûú"):
        if selected and selected in client_dict:
            st.session_state.client_id = client_dict[selected]["id"]
            st.session_state.client_name = client_dict[selected]["name"]
            st.session_state.client_phone = selected
            st.session_state.found_client = True
            st.rerun()
        else:
            st.session_state.proposed_phone = user_input
            go_to("create")

    if st.session_state.get("found_client", False):
        st.markdown(
            f"""
            <div style="background-color:#eafbea; border-radius:8px; padding:16px;">
            ‚úÖ <b>–ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞:</b><br>
            <span style="font-size:1.1em;">
              üë§ <b>{st.session_state['client_name']}</b>
              <span style="color:#673ab7;"><b>ID:</b> {st.session_state['client_id']}</span>
              <span style="color:#222;">üìû {st.session_state['client_phone']}</span>
            </span>
            </div>
            """,
            unsafe_allow_html=True
        )
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            if st.button("üõí –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–∫–∞–∑"):
                st.session_state.found_client = False
                go_to("order")
        with col2:
            if st.button("üîé –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"):
                st.session_state.page = "orders"
                st.session_state.found_client = False
                st.rerun()
        with col3:
            if st.button("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞"):
                st.session_state.found_client = False
                go_to("edit_client")
        with col4:
            if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
                st.session_state.found_client = False
                go_to("check")
        st.stop()

# ==== PAGE 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_create():
    st.markdown("<h2 style='text-align: center;'>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    next_id = get_next_id()
    st.info(f"ID –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {next_id}")
    with st.form("new_client_form"):
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", value=st.session_state.get("proposed_phone", ""))
        name = st.text_input("–Ü–º'—è")
        surname = st.text_input("–ü—Ä—ñ–∑–≤–∏—â–µ")
        city = st.text_input("–ú—ñ—Å—Ç–æ")
        delivery = st.text_input("–î–æ—Å—Ç–∞–≤–∫–∞")
        np = st.text_input("–ù–ü")
        comment = st.text_input("–ö–æ–º–µ–Ω—Ç–∞—Ä")
        submitted = st.form_submit_button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
    if submitted:
        actual_id = get_next_id()
        values = [
            actual_id,
            phone,
            "",
            name,
            surname,
            city,
            np,
            delivery,
            comment,
            1
        ]
        append_client(values)
        load_clients.clear()  # <--- –°–±—Ä–æ—Å –∫—ç—à–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!
        st.success(f"–ö–ª—ñ—î–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ –∑ ID: {actual_id}")
        st.session_state.client_id = actual_id
        st.session_state.client_name = name
        st.session_state.just_added_client = True

    if st.session_state.get("just_added_client", False):
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üõí –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–∫–∞–∑ –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"):
                st.session_state.just_added_client = False
                go_to("order")
        with col2:
            if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
                st.session_state.just_added_client = False
                go_to("check")
        st.stop()
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"):
        go_to("check")

# ==== PAGE 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ====  (–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–π!)
def page_order():
    price_data = load_price()
    size_data = load_sizes()
    color_data = load_colors()
    clients = load_clients()
    client_info = next((row for row in clients if str(row.get("ID")) == str(st.session_state.get("client_id"))), {})

    if not client_info:
        st.warning("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞.")
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"):
            go_to("check")
        st.stop()

    st.header("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    col1, col2, col3 = st.columns(3)
    with col1:
        name = st.text_input("–Ü–º'—è", value=client_info.get("–ò–º—è", ""))
    with col2:
        surname = st.text_input("–ü—Ä—ñ–∑–≤–∏—â–µ", value=client_info.get("–§–∞–º–∏–ª–∏—è", ""))
    with col3:
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", value=client_info.get("–ù–æ–º–µ—Ä", ""))

    col4, col5, col6 = st.columns(3)
    with col4:
        city = st.text_input("–ú—ñ—Å—Ç–æ", value=client_info.get("–ì–æ—Ä–æ–¥", ""))
    with col5:
        np = st.text_input("–ù–ü (–ù–æ–≤–∞ –ü–æ—à—Ç–∞)", value=client_info.get("–ù–ü", ""))
    with col6:
        delivery = st.text_input("–î–æ—Å—Ç–∞–≤–∫–∞", value=client_info.get("–î–æ—Å—Ç–∞–≤–∫–∞", ""))

    comment = st.text_input("–ö–æ–º–µ–Ω—Ç–∞—Ä (–Ü–º‚Äô—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞)", value=client_info.get("–ö–æ–º–µ–Ω—Ç", ""))

    st.markdown("---")
    currency = st.selectbox("–í–∞–ª—é—Ç–∞", ["–ì–†–ù", "USD"])
    pay_type = st.selectbox("–¢–∏–ø –æ–ø–ª–∞—Ç–∏", ["–ë–µ–∑ –æ–ø–ª–∞—Ç–∏", "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞", "–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"])
    prepay_amount = 0
    if pay_type == "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞":
        prepay_amount = st.number_input("–°—É–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∏", min_value=0.0, step=1.0)

    st.markdown("---")
    models = []
    seen = set()
    for row in price_data:
        m = row.get("–ú–æ–¥–µ–ª—å")
        if m and m not in seen:
            models.append(m)
            seen.add(m)

    if "order_rows" not in st.session_state:
        st.session_state.order_rows = []

    st.subheader("–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä")
    def add_row():
        size_display = ""
        v_rostovke = 1
        for sd in size_data:
            if sd["–ú–æ–¥–µ–ª—å"] == models[0]:
                size_display = str(sd.get("–†–∞–∑–º–µ—Ä—ã —Ä–æ—Å—Ç–æ–≤–∫–∏", "")).strip()
                try:
                    v_rostovke = int(sd.get("–í —Ä–æ—Å—Ç–æ–≤–∫–µ", 1))
                except:
                    v_rostovke = 1
                break
        st.session_state.order_rows.append({
            "model": models[0],
            "color": "",
            "size": size_display,
            "v_rostovke": v_rostovke,
            "qty_rostovok": 1,
            "total_qty": v_rostovke,
            "price": 0.0,
            "discount": 0.0,
            "total_sum": 0.0
        })

    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"):
        add_row()

    for idx, row in enumerate(st.session_state.order_rows):
        st.markdown(f"**–¢–æ–≤–∞—Ä #{idx+1}**")
        cols = st.columns(6)
        row["model"] = cols[0].selectbox(
            "–ú–æ–¥–µ–ª—å", models, index=models.index(row["model"]) if row["model"] in models else 0, key=f"model_{idx}"
        )
        color_choices = [r["–¶–≤–µ—Ç"] for r in color_data if r["–ú–æ–¥–µ–ª—å"] == row["model"]]
        row["color"] = cols[1].selectbox(
            "–ö–æ–ª—ñ—Ä", color_choices + ["–í–≤–µ—Å—Ç–∏ —Å–≤—ñ–π..."], index=color_choices.index(row["color"]) if row["color"] in color_choices else 0, key=f"color_{idx}"
        )
        if row["color"] == "–í–≤–µ—Å—Ç–∏ —Å–≤—ñ–π...":
            row["color"] = cols[1].text_input("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∫–æ–ª—ñ—Ä:", key=f"custom_color_{idx}")

        size_display = ""
        v_rostovke_db = 1
        for sd in size_data:
            if sd["–ú–æ–¥–µ–ª—å"] == row["model"]:
                size_display = str(sd.get("–†–∞–∑–º–µ—Ä—ã —Ä–æ—Å—Ç–æ–≤–∫–∏", "")).strip()
                try:
                    v_rostovke_db = int(sd.get("–í —Ä–æ—Å—Ç–æ–≤–∫–µ", 1))
                except:
                    v_rostovke_db = 1
                break
        sizes_display = [size_display] if size_display else []
        current_idx = sizes_display.index(row["size"]) if row["size"] in sizes_display else len(sizes_display)
        row["size"] = cols[2].selectbox(
            "–†–æ–∑–º—ñ—Ä", sizes_display + ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É..."], index=current_idx, key=f"size_{idx}"
        )

        if row["size"] == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É...":
            row["size"] = cols[2].text_input("–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:", key=f"custom_size_{idx}")
            row["v_rostovke"] = cols[3].number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É —Ä–æ—Å—Ç.", value=row.get("v_rostovke", 1), min_value=1, step=1, key=f"v_rost_{idx}")
        else:
            row["v_rostovke"] = cols[3].number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É —Ä–æ—Å—Ç.", value=v_rostovke_db, min_value=1, step=1, key=f"v_rost_{idx}", disabled=True)

        row["qty_rostovok"] = cols[4].number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ—Å—Ç–æ–≤–æ–∫", value=row.get("qty_rostovok", 1), min_value=1, step=1, key=f"qty_rost_{idx}")
        row["total_qty"] = row["v_rostovke"] * row["qty_rostovok"]
        cols[5].number_input("–ó–∞–≥–∞–ª—å–Ω–∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å", value=row["total_qty"], min_value=1, step=1, key=f"total_qty_{idx}", disabled=True)

        price_col, disc_col, sum_col = st.columns([2, 2, 3])
        price = None
        for pd in price_data:
            if pd["–ú–æ–¥–µ–ª—å"] == row["model"]:
                price = float(pd.get("–¶ $/—à—Ç", 0)) if currency == "USD" else float(pd.get("–¶ –ì–†–ù/—à—Ç", 0))
                break
        if price is not None:
            row["price"] = price_col.number_input("–¶—ñ–Ω–∞/—à—Ç", value=price, min_value=0.0, step=0.01, key=f"price_{idx}", disabled=True)
        else:
            row["price"] = price_col.number_input("–¶—ñ–Ω–∞/—à—Ç", min_value=0.0, step=0.01, key=f"price_{idx}")

        row["discount"] = disc_col.number_input("–ó–Ω–∏–∂–∫–∞", value=row.get("discount", 0.0), min_value=0.0, step=1.0, key=f"discount_{idx}")
        row["total_sum"] = row["total_qty"] * row["price"] - row["discount"]
        sum_col.number_input("–ó–∞–≥–∞–ª–æ–º, –≥—Ä–Ω", value=row["total_sum"], key=f"total_sum_{idx}", disabled=True)

        if st.button(f"–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä {idx+1}"):
            st.session_state.order_rows.pop(idx)
            st.rerun()

    st.markdown("---")
    if st.session_state.order_rows:
        order_total = sum(row["total_sum"] for row in st.session_state.order_rows)
    else:
        order_total = 0

    if pay_type == "–ë–µ–∑ –æ–ø–ª–∞—Ç–∏":
        to_pay = order_total
    elif pay_type == "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞":
        to_pay = order_total - prepay_amount
    else:
        to_pay = 0

    st.info(f"**–î–æ —Å–ø–ª–∞—Ç–∏:** {to_pay:.2f} {currency}")

    if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"):
        order_id = get_next_order_id()
        save_order_to_sheet(
            st.session_state.order_rows,
            {
                "ID": st.session_state.get("client_id"),
                "–Ü–º'—è": name,
                "–ü—Ä—ñ–∑–≤–∏—â–µ": surname,
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É": phone,
                "–ú—ñ—Å—Ç–æ": city,
                "–ù–ü": np,
                "–î–æ—Å—Ç–∞–≤–∫–∞": delivery,
                "–ö–æ–º–µ–Ω—Ç–∞—Ä": comment
            },
            {
                "–í–∞–ª—é—Ç–∞": currency,
                "–¢–∏–ø –æ–ø–ª–∞—Ç–∏": pay_type,
                "–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∏": prepay_amount,
                "–î–æ —Å–ø–ª–∞—Ç–∏": to_pay
            },
            order_id
        )
        st.session_state.order_rows = []
        st.session_state.order_saved = order_id
        st.rerun()

    if st.session_state.get("order_saved"):
        order_id = st.session_state.order_saved
        st.success(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤"):
                st.session_state.order_saved = None
                go_to("check")
        with col2:
            if st.button("üõí –°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"):
                st.session_state.order_saved = None
                go_to("order")
        st.stop()

# ==== PAGE 4: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_orders():
    st.markdown("<h2 style='text-align: center;'>–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    client_id = st.session_state.get("client_id")
    orders = load_orders()
    if not client_id:
        client_id = st.session_state.get("client_id") or st.session_state.get("selected_client_id")
    client_orders = [o for o in orders if str(o.get("ID –∫–ª–∏–µ–Ω—Ç–∞")) == str(client_id)]
    unique_orders = {}
    for o in client_orders:
        order_id = o.get("ID –∑–∞–∫–∞–∑–∞")
        if order_id not in unique_orders:
            unique_orders[order_id] = o
    unique_orders_list = sorted(unique_orders.values(), key=lambda x: x.get('–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', ''), reverse=True)
    if not unique_orders_list:
        st.info("–£ –∫–ª—ñ—î–Ω—Ç–∞ —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
    else:
        order_display = [
            f"ID: {o['ID –∑–∞–∫–∞–∑–∞']} | {o.get('–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞','')} | {o.get('–°—É–º–º–∞ (–≥—Ä–Ω)','0')} –≥—Ä–Ω | {o.get('–¢–∏–ø –æ–ø–ª–∞—Ç–∏','')}"
            for o in unique_orders_list
        ]
        selected = st.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", order_display, key="select_order")
        if st.button("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"):
            order_id = selected.split('|')[0].replace("ID:", "").strip()
            st.session_state.edit_order_id = order_id
            st.session_state.page = "edit_order"
            st.rerun()
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞"):
        st.session_state.page = "check"
        st.rerun()
    st.stop()

# ==== PAGE 5: –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ====
def page_edit_order():
    orders = load_orders()
    order_id = st.session_state.get("edit_order_id")
    price_data = load_price()
    size_data = load_sizes()
    color_data = load_colors()

    # –ë–µ—Ä—ë–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_rows = [o for o in orders if str(o.get("ID –∑–∞–∫–∞–∑–∞")) == str(order_id)]
    if not order_rows:
        st.warning("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        if st.button("‚¨ÖÔ∏è –î–æ –∑–∞–º–æ–≤–ª–µ–Ω—å"):
            st.session_state.page = "orders"
            st.rerun()
        st.stop()

    st.markdown(f"### –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID: {order_id}")
    first_row = order_rows[0]

    name = st.text_input("–Ü–º'—è", value=first_row.get("–ò–º—è", ""))
    surname = st.text_input("–ü—Ä—ñ–∑–≤–∏—â–µ", value=first_row.get("–§–∞–º–∏–ª–∏—è", ""))
    phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", value=first_row.get("–¢–µ–ª–µ—Ñ–æ–Ω", ""))
    city = st.text_input("–ú—ñ—Å—Ç–æ", value=first_row.get("–ì–æ—Ä–æ–¥", ""))
    np = st.text_input("–ù–ü", value=first_row.get("–ù–ü", ""))
    delivery = st.text_input("–î–æ—Å—Ç–∞–≤–∫–∞", value=first_row.get("–î–æ—Å—Ç–∞–≤–∫–∞", ""))
    comment = st.text_input("–ö–æ–º–µ–Ω—Ç–∞—Ä", value=first_row.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", ""))

    st.markdown("---")
    currency = st.selectbox("–í–∞–ª—é—Ç–∞", ["–ì–†–ù", "USD"], index=0 if first_row.get("–í–∞–ª—é—Ç–∞", "–ì–†–ù") == "–ì–†–ù" else 1)
    pay_type = st.selectbox("–¢–∏–ø –æ–ø–ª–∞—Ç–∏", ["–ë–µ–∑ –æ–ø–ª–∞—Ç–∏", "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞", "–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"],
        index=["–ë–µ–∑ –æ–ø–ª–∞—Ç–∏", "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞", "–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"].index(first_row.get("–¢–∏–ø –æ–ø–ª–∞—Ç—ã", "–ë–µ–∑ –æ–ø–ª–∞—Ç–∏")))
    prepay_amount = st.number_input("–°—É–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∏", min_value=0.0, step=1.0, value=float(first_row.get("–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã", 0)))
    to_pay = st.number_input("–î–æ —Å–ø–ª–∞—Ç–∏", min_value=0.0, step=1.0, value=float(first_row.get("–î–æ —Å–ø–ª–∞—Ç–∏", 0)))
    st.markdown("---")

    st.subheader("–ü–æ–∑–∏—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    if "edit_order_rows" not in st.session_state:
        st.session_state.edit_order_rows = []
        for row in order_rows:
            st.session_state.edit_order_rows.append({
                "model": row.get("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", ""),
                "color": row.get("–¶–≤–µ—Ç", ""),
                "size": row.get("–†–∞–∑–º–µ—Ä", ""),
                "manual_size": row.get("–†—É—á–Ω–æ–π —Ä–∞–∑–º–µ—Ä", ""),
                "v_rostovke": int(row.get("–ö-–≤–æ –≤ —Ä–æ—Å—Ç–æ–≤–∫–µ", 1)),
                "qty_rostovok": int(row.get("–ö-–≤–æ —Ä–æ—Å—Ç–æ–≤–æ–∫", 1)),
                "total_qty": int(row.get("–û–±—â. –∫–æ–ª-–≤–æ", 1)),
                "price": float(row.get("–¶–µ–Ω–∞/—à—Ç", 0)),
                "discount": float(row.get("–°–∫–∏–¥–∫–∞", 0)),
                "total_sum": float(row.get("–°—É–º–º–∞ (–≥—Ä–Ω)", 0)),
                "rejected": (row.get("–í—ñ–¥–º–æ–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞", "") == "+"),
                "date": row.get("–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "")
            })

    rows = st.session_state.edit_order_rows
    remove_idx = None

    for idx, row in enumerate(rows):
        with st.expander(f"–¢–æ–≤–∞—Ä #{idx+1}", expanded=True):
            row["model"] = st.text_input(f"–ú–æ–¥–µ–ª—å {idx+1}", value=row["model"], key=f"edit_model_{order_id}_{idx}")
            row["color"] = st.text_input(f"–ö–æ–ª—ñ—Ä {idx+1}", value=row["color"], key=f"edit_color_{order_id}_{idx}")
            row["size"] = st.text_input(f"–†–æ–∑–º—ñ—Ä {idx+1}", value=row["size"], key=f"edit_size_{order_id}_{idx}")
            row["manual_size"] = st.text_input(f"–†—É—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä {idx+1}", value=row["manual_size"], key=f"edit_manual_size_{order_id}_{idx}")
            row["v_rostovke"] = st.number_input(f"–ö-–≤–æ –≤ —Ä–æ—Å—Ç–æ–≤–∫–µ {idx+1}", value=row["v_rostovke"], key=f"edit_v_rostovke_{order_id}_{idx}")
            row["qty_rostovok"] = st.number_input(f"–ö-–≤–æ —Ä–æ—Å—Ç–æ–≤–æ–∫ {idx+1}", value=row["qty_rostovok"], key=f"edit_qty_rostovok_{order_id}_{idx}")
            row["total_qty"] = st.number_input(f"–û–±—â. –∫–æ–ª-–≤–æ {idx+1}", value=row["total_qty"], key=f"edit_total_qty_{order_id}_{idx}")
            row["price"] = st.number_input(f"–¶–µ–Ω–∞/—à—Ç {idx+1}", value=row["price"], key=f"edit_price_{order_id}_{idx}")
            row["discount"] = st.number_input(f"–°–∫–∏–¥–∫–∞ {idx+1}", value=row["discount"], key=f"edit_discount_{order_id}_{idx}")
            row["total_sum"] = st.number_input(f"–°—É–º–∞ (–≥—Ä–Ω) {idx+1}", value=row["total_sum"], key=f"edit_total_sum_{order_id}_{idx}")
            row["rejected"] = st.checkbox("–ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É", value=row["rejected"], key=f"edit_rejected_{order_id}_{idx}")
            if len(rows) > 1:
                if st.button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä", key=f"remove_{order_id}_{idx}"):
                    remove_idx = idx

    if remove_idx is not None:
        rows.pop(remove_idx)
        st.experimental_rerun()

    st.markdown("---")
    if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏"):
        common_fields = {
            "–ò–º—è": name,
            "–§–∞–º–∏–ª–∏—è": surname,
            "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
            "–ì–æ—Ä–æ–¥": city,
            "–ù–ü": np,
            "–î–æ—Å—Ç–∞–≤–∫–∞": delivery,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
            "–í–∞–ª—é—Ç–∞": currency,
            "–¢–∏–ø –æ–ø–ª–∞—Ç—ã": pay_type,
            "–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã": prepay_amount,
            "–î–æ —Å–ø–ª–∞—Ç–∏": to_pay,
        }
        # –ó–∞–ø–∏—à–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        for row in rows:
            if not row["date"]:
                row["date"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        update_order_rows_in_sheet(order_id, rows, common_fields)
        st.success("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        st.session_state.pop("edit_order_rows")
        st.stop()

    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å"):
        st.session_state.page = "orders"
        st.session_state.pop("edit_order_rows", None)
        st.rerun()
    st.stop()

# ==== PAGE 6: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_edit_client():
    clients = load_clients()
    client_id = st.session_state.get("client_id")
    client = next((row for row in clients if str(row.get("ID")) == str(client_id)), {})
    if not client:
        st.warning("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
            go_to("check")
        st.stop()
    st.markdown("<h2 style='text-align: center;'>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    with st.form("edit_client_form"):
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", value=client.get("–ù–æ–º–µ—Ä", ""))
        name = st.text_input("–Ü–º'—è", value=client.get("–ò–º—è", ""))
        surname = st.text_input("–ü—Ä—ñ–∑–≤–∏—â–µ", value=client.get("–§–∞–º–∏–ª–∏—è", ""))
        city = st.text_input("–ú—ñ—Å—Ç–æ", value=client.get("–ì–æ—Ä–æ–¥", ""))
        np = st.text_input("–ù–ü", value=client.get("–ù–ü", ""))
        delivery = st.text_input("–î–æ—Å—Ç–∞–≤–∫–∞", value=client.get("–î–æ—Å—Ç–∞–≤–∫–∞", ""))
        comment = st.text_input("–ö–æ–º–µ–Ω—Ç–∞—Ä", value=client.get("–ö–æ–º–µ–Ω—Ç", ""))
        submitted = st.form_submit_button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏")
    if submitted:
        values = [
            client_id,
            phone,
            "",
            name,
            surname,
            city,
            np,
            delivery,
            comment,
            1
        ]
        update_client_in_sheet(client_id, values)
        load_clients.clear()
        st.success("–ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
        st.session_state.found_client = False
        go_to("check")
    if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
        go_to("check")

# ==== –†–æ—É—Ç–∏–Ω–≥ ====
if st.session_state.page == "check":
    page_check()
elif st.session_state.page == "create":
    page_create()
elif st.session_state.page == "order":
    page_order()
elif st.session_state.page == "orders":
    page_orders()
elif st.session_state.page == "edit_order":
    page_edit_order()
elif st.session_state.page == "edit_client":
    page_edit_client()
