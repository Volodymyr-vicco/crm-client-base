import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import os
import json

# ====== –ö–ê–°–¢–û–ú–ù–´–ô CSS ======
st.markdown(
    """
    <style>
    .stTextInput > div > div > input,
    .stSelectbox > div > div > div > div,
    .stNumberInput input {
        min-width: 500px !important;
        max-width: 700px !important;
    }
    .block-container {
        max-width: 900px;
        margin-left: auto;
        margin-right: auto;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# --- Google Sheets Setup ---
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
GOOGLE_SERVICE_ACCOUNT_JSON = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON")
if not GOOGLE_SERVICE_ACCOUNT_JSON:
    st.error("Google Service Account JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    st.stop()
service_account_info = json.loads(GOOGLE_SERVICE_ACCOUNT_JSON)
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

# ==== HELPERS ====
def get_next_id():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    id_list = sheet.col_values(1)[1:]
    id_list = [int(x) for x in id_list if x.isdigit()]
    return max(id_list) + 1 if id_list else 1

def get_next_order_id():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    values = sheet.col_values(1)[1:]
    id_numbers = [int(x) for x in values if x.isdigit()]
    return max(id_numbers) + 1 if id_numbers else 1

@st.cache_data
def load_clients():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    return sheet.get_all_records()

@st.cache_data
def load_price():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ü—Ä–∞–π—Å")
    return sheet.get_all_records()

@st.cache_data
def load_sizes():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥")
    return sheet.get_all_records()

@st.cache_data
def load_colors():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–¶–≤–µ—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞")
    return sheet.get_all_records()

@st.cache_data
def load_orders():
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    return sheet.get_all_records()

def append_client(values):
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    sheet.append_row(values)

def update_client_in_sheet(client_id, values):
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    records = sheet.get_all_records()
    for i, row in enumerate(records):
        if str(row.get("ID")) == str(client_id):
            sheet.update(f"A{i+2}:J{i+2}", [values])
            break

def save_order_to_sheet(order_rows, client_info, payment_info, order_id):
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    if not sheet.get_all_values():
        sheet.append_row([
            "ID –∑–∞–∫–∞–∑–∞",
            "ID –∫–ª–∏–µ–Ω—Ç–∞", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ì–æ—Ä–æ–¥", "–ù–ü", "–î–æ—Å—Ç–∞–≤–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            "–í–∞–ª—é—Ç–∞", "–¢–∏–ø –æ–ø–ª–∞—Ç—ã", "–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã", "–î–æ —Å–ø–ª–∞—Ç–∏",
            "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–¶–≤–µ—Ç", "–†–∞–∑–º–µ—Ä", "–†—É—á–Ω–æ–π —Ä–∞–∑–º–µ—Ä", "–ö-–≤–æ –≤ —Ä–æ—Å—Ç–æ–≤–∫–µ", "–ö-–≤–æ —Ä–æ—Å—Ç–æ–≤–æ–∫",
            "–û–±—â. –∫–æ–ª-–≤–æ", "–¶–µ–Ω–∞/—à—Ç", "–°–∫–∏–¥–∫–∞", "–°—É–º–º–∞ (–≥—Ä–Ω)", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"
        ])
    for row in order_rows:
        manual_size = ""
        size_value = row.get("size", "")
        if "–≤–≤–µ—Å—Ç–∏" in str(row.get("size", "")).lower() or "—Ä—É—á–Ω" in str(row.get("size", "")).lower():
            manual_size = row.get("size", "")
            size_value = ""
        sheet.append_row([
            order_id,
            client_info["ID"],
            client_info["–Ü–º'—è"],
            client_info["–ü—Ä—ñ–∑–≤–∏—â–µ"],
            client_info["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"],
            client_info["–ú—ñ—Å—Ç–æ"],
            client_info["–ù–ü"],
            client_info["–î–æ—Å—Ç–∞–≤–∫–∞"],
            client_info["–ö–æ–º–µ–Ω—Ç–∞—Ä"],
            payment_info["–í–∞–ª—é—Ç–∞"],
            payment_info["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"],
            payment_info["–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã"] if payment_info["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"] == "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞" else 0,
            payment_info["–î–æ —Å–ø–ª–∞—Ç–∏"],
            row.get("model", ""),
            row.get("color", ""),
            size_value,
            manual_size,
            row.get("v_rostovke", ""),
            row.get("qty_rostovok", ""),
            row.get("total_qty", ""),
            row.get("price", ""),
            row.get("discount", ""),
            row.get("total_sum", ""),
            datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        ])

def update_order_in_sheet(order_id, updates: dict):
    sheet = client.open("–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤").worksheet("–ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤")
    records = sheet.get_all_records()
    for i, row in enumerate(records):
        if str(row.get("ID –∑–∞–∫–∞–∑–∞")) == str(order_id):
            row_number = i + 2
            if "–°—É–º–º–∞ (–≥—Ä–Ω)" in updates:
                sheet.update(f"W{row_number}", [[updates["–°—É–º–º–∞ (–≥—Ä–Ω)"]]])
            if "–¢–∏–ø –æ–ø–ª–∞—Ç–∏" in updates:
                sheet.update(f"L{row_number}", [[updates["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"]]])
            if "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞" in updates:
                sheet.update(f"X{row_number}", [[updates["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"]]])
            break
    load_orders.clear()  # –°–±—Ä–æ—Å –∫—ç—à–∞

# ==== –ù–∞–≤–∏–≥–∞—Ü–∏—è ====
if "page" not in st.session_state:
    st.session_state.page = "check"

def go_to(page):
    st.session_state.page = page
    st.rerun()

# ==== PAGE 1: –ü–æ–∏—Å–∫/–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_check():
    st.markdown("<h2 style='text-align: center;'>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    records = load_clients()
    client_dict = {}
    for row in records:
        phone = str(row.get("–ù–æ–º–µ—Ä", "")).strip()
        if phone and phone[0] != '0' and len(phone) == 9:
            phone = '0' + phone
        client_dict[phone] = {
            "id": row.get("ID"),
            "name": row.get("–ò–º—è", ""),
        }
    user_input = st.text_input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 068):").strip()
    matches = sorted([num for num in client_dict if num.startswith(user_input)]) if user_input else []
    selected = st.selectbox("–ù–∞–π–¥–µ–Ω—ñ –Ω–æ–º–µ—Ä–∏:", matches) if matches else None

    if st.button("Next ‚ûú"):
        if selected and selected in client_dict:
            st.session_state.client_id = client_dict[selected]["id"]
            st.session_state.client_name = client_dict[selected]["name"]
            st.session_state.client_phone = selected
            st.session_state.found_client = True
            st.rerun()
        else:
            st.session_state.proposed_phone = user_input
            go_to("create")

    if st.session_state.get("found_client", False):
        st.markdown(
            f"""
            <div style="background-color:#eafbea; border-radius:8px; padding:16px;">
            ‚úÖ <b>–ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞:</b><br>
            <span style="font-size:1.1em;">
              üë§ <b>{st.session_state['client_name']}</b>
              <span style="color:#673ab7;"><b>ID:</b> {st.session_state['client_id']}</span>
              <span style="color:#222;">üìû {st.session_state['client_phone']}</span>
            </span>
            </div>
            """,
            unsafe_allow_html=True
        )
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            if st.button("üõí –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–∫–∞–∑"):
                st.session_state.found_client = False
                go_to("order")
        with col2:
            if st.button("üîé –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"):
                st.session_state.page = "orders"
                st.session_state.found_client = False
                st.rerun()
        with col3:
            if st.button("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞"):
                st.session_state.found_client = False
                go_to("edit_client")
        with col4:
            if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
                st.session_state.found_client = False
                go_to("check")
        st.stop()

# ==== PAGE 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_create():
    st.markdown("<h2 style='text-align: center;'>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    next_id = get_next_id()
    st.info(f"ID –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {next_id}")
    with st.form("new_client_form"):
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", value=st.session_state.get("proposed_phone", ""))
        name = st.text_input("–Ü–º'—è")
        surname = st.text_input("–ü—Ä—ñ–∑–≤–∏—â–µ")
        city = st.text_input("–ú—ñ—Å—Ç–æ")
        delivery = st.text_input("–î–æ—Å—Ç–∞–≤–∫–∞")
        np = st.text_input("–ù–ü")
        comment = st.text_input("–ö–æ–º–µ–Ω—Ç–∞—Ä")
        submitted = st.form_submit_button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
    if submitted:
        actual_id = get_next_id()
        values = [
            actual_id,
            phone,
            "",
            name,
            surname,
            city,
            np,
            delivery,
            comment,
            1
        ]
        append_client(values)
        load_clients.clear()
        st.success(f"–ö–ª—ñ—î–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ –∑ ID: {actual_id}")
        st.session_state.client_id = actual_id
        st.session_state.client_name = name
        st.session_state.just_added_client = True

    if st.session_state.get("just_added_client", False):
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üõí –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–∫–∞–∑ –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"):
                st.session_state.just_added_client = False
                go_to("order")
        with col2:
            if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
                st.session_state.just_added_client = False
                go_to("check")
        st.stop()
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"):
        go_to("check")

# ==== PAGE 3: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_orders():
    st.markdown("<h2 style='text-align: center;'>–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    client_id = st.session_state.get("client_id")
    orders = load_orders()
    # –µ—Å–ª–∏ –∑–∞—à–ª–∏ —Å found_client == False
    if not client_id:
        client_id = st.session_state.get("client_id") or st.session_state.get("selected_client_id")
    client_orders = [o for o in orders if str(o.get("ID –∫–ª–∏–µ–Ω—Ç–∞")) == str(client_id)]
    # --- –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ ID –∑–∞–∫–∞–∑–∞ ---
    unique_orders = {}
    for o in client_orders:
        order_id = o.get("ID –∑–∞–∫–∞–∑–∞")
        if order_id not in unique_orders:
            unique_orders[order_id] = o
    unique_orders_list = sorted(unique_orders.values(), key=lambda x: x.get('–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', ''), reverse=True)
    if not unique_orders_list:
        st.info("–£ –∫–ª—ñ—î–Ω—Ç–∞ —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
    else:
        order_display = [
            f"ID: {o['ID –∑–∞–∫–∞–∑–∞']} | {o.get('–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞','')} | {o.get('–°—É–º–º–∞ (–≥—Ä–Ω)','0')} –≥—Ä–Ω | {o.get('–¢–∏–ø –æ–ø–ª–∞—Ç–∏','')}"
            for o in unique_orders_list
        ]
        selected = st.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", order_display, key="select_order")
        if st.button("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"):
            order_id = selected.split('|')[0].replace("ID:", "").strip()
            st.session_state.edit_order_id = order_id
            st.session_state.page = "edit_order"
            st.rerun()
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞"):
        st.session_state.page = "check"
        st.rerun()
    st.stop()

# ==== PAGE 4: –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ====
def page_edit_order():
    orders = load_orders()
    order_id = st.session_state.get("edit_order_id")
    order = next((o for o in orders if str(o.get("ID –∑–∞–∫–∞–∑–∞")) == str(order_id)), None)
    if not order:
        st.warning("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        if st.button("‚¨ÖÔ∏è –î–æ –∑–∞–º–æ–≤–ª–µ–Ω—å"):
            st.session_state.page = "orders"
            st.rerun()
        st.stop()
    st.markdown(f"### –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID: {order['ID –∑–∞–∫–∞–∑–∞']}")
    new_sum = st.text_input("–°—É–º–∞ (–≥—Ä–Ω)", value=str(order.get("–°—É–º–º–∞ (–≥—Ä–Ω)", "")), key="edit_order_sum")
    new_pay = st.selectbox("–¢–∏–ø –æ–ø–ª–∞—Ç–∏", ["–ë–µ–∑ –æ–ø–ª–∞—Ç–∏", "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞", "–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"], 
        index=["–ë–µ–∑ –æ–ø–ª–∞—Ç–∏", "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞", "–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"].index(order.get("–¢–∏–ø –æ–ø–ª–∞—Ç–∏", "–ë–µ–∑ –æ–ø–ª–∞—Ç–∏")), key="edit_order_pay")
    new_date = st.text_input("–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", value=order.get("–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", ""), key="edit_order_date")
    if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏"):
        update_order_in_sheet(order["ID –∑–∞–∫–∞–∑–∞"], {
            "–°—É–º–º–∞ (–≥—Ä–Ω)": new_sum,
            "–¢–∏–ø –æ–ø–ª–∞—Ç–∏": new_pay,
            "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": new_date
        })
        st.success("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        st.stop()
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å"):
        st.session_state.page = "orders"
        st.rerun()
    st.stop()

# ==== PAGE 5: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ====
def page_edit_client():
    clients = load_clients()
    client_id = st.session_state.get("client_id")
    client = next((row for row in clients if str(row.get("ID")) == str(client_id)), {})
    if not client:
        st.warning("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
            go_to("check")
        st.stop()
    st.markdown("<h2 style='text-align: center;'>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞</h2>", unsafe_allow_html=True)
    with st.form("edit_client_form"):
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", value=client.get("–ù–æ–º–µ—Ä", ""))
        name = st.text_input("–Ü–º'—è", value=client.get("–ò–º—è", ""))
        surname = st.text_input("–ü—Ä—ñ–∑–≤–∏—â–µ", value=client.get("–§–∞–º–∏–ª–∏—è", ""))
        city = st.text_input("–ú—ñ—Å—Ç–æ", value=client.get("–ì–æ—Ä–æ–¥", ""))
        np = st.text_input("–ù–ü", value=client.get("–ù–ü", ""))
        delivery = st.text_input("–î–æ—Å—Ç–∞–≤–∫–∞", value=client.get("–î–æ—Å—Ç–∞–≤–∫–∞", ""))
        comment = st.text_input("–ö–æ–º–µ–Ω—Ç–∞—Ä", value=client.get("–ö–æ–º–µ–Ω—Ç", ""))
        submitted = st.form_submit_button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏")
    if submitted:
        values = [
            client_id,
            phone,
            "",
            name,
            surname,
            city,
            np,
            delivery,
            comment,
            1
        ]
        update_client_in_sheet(client_id, values)
        load_clients.clear()
        st.success("–ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
        st.session_state.found_client = False
        go_to("check")
    if st.button("‚¨ÖÔ∏è –î–æ –ø–æ—à—É–∫—É"):
        go_to("check")

# ==== PAGE 6: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ====
# (–¢—É—Ç –æ—Å—Ç–∞–≤—å —Å–≤–æ—é page_order(), –µ—Å–ª–∏ –æ–Ω–∞ —É —Ç–µ–±—è –±—ã–ª–∞. –û–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —ç—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.)

# ==== –†–æ—É—Ç–∏–Ω–≥ ====
if st.session_state.page == "check":
    page_check()
elif st.session_state.page == "create":
    page_create()
elif st.session_state.page == "order":
    page_order()
elif st.session_state.page == "edit_client":
    page_edit_client()
elif st.session_state.page == "orders":
    page_orders()
elif st.session_state.page == "edit_order":
    page_edit_order()
